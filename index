<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Coach Salade 2.0</title>
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Montserrat:wght@400;500&display=swap" rel="stylesheet">
  <style>
    html, body {
      height: 100%;
      margin: 0;
      font-family: 'Montserrat', sans-serif;
      background: linear-gradient(135deg, #ec4899 0%, #7f9cf5 100%);
      min-height: 100vh;
      background-attachment: fixed;
    }
    h1, h2, .font-display {
      font-family: 'Playfair Display', serif;
    }
    .card {
      background: rgba(255,255,255,0.7);
      backdrop-filter: blur(10px);
      border-radius: 1.5rem;
      box-shadow: 0 4px 32px 0 rgba(0,0,0,0.08);
      padding: 1.5rem;
      margin-bottom: 1rem;
    }
    .pie {
      width: 112px;
      height: 112px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      background: conic-gradient(var(--main) calc(var(--pct)*1%), #eee 0 100%);
    }
    .pie-text {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      font-size: 1.5rem;
      color: #ec4899;
    }
  </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen">
  <!-- Vue principale: Menu -->
  <div id="menu-view" class="w-full max-w-md mx-auto flex flex-col items-center justify-center min-h-screen">
    <div class="card w-full text-center">
      <h1 class="font-display text-3xl mb-4">Coach Salade ü•ó</h1>
      <button onclick="showView('generator-view')" class="w-full mb-3 px-4 py-3 rounded-2xl bg-pink-500 text-white font-bold text-lg shadow-md transition hover:bg-pink-600">G√©n√©rateur</button>
      <button onclick="showView('composer-view')" class="w-full px-4 py-3 rounded-2xl bg-white border-2 border-pink-500 text-pink-500 font-bold text-lg shadow-md transition hover:bg-pink-50">Compositeur</button>
    </div>
    <footer class="text-xs text-gray-600 opacity-80 mt-12">Coach Salade 2.0 ‚Ä¢ ¬© 2025</footer>
  </div>

  <!-- G√©n√©rateur de Salade -->
  <div id="generator-view" class="hidden w-full max-w-md mx-auto flex flex-col items-center min-h-screen pt-6">
    <button onclick="showView('menu-view')" class="mb-2 text-pink-500 font-semibold flex items-center gap-1">‚¨ÖÔ∏è Menu</button>
    <div class="card w-full">
      <h2 class="font-display text-2xl mb-3">G√©n√©rateur de Salade üé≤</h2>
      <label for="user-weight" class="block text-sm mb-2">Ton poids (kg) :</label>
      <div class="flex items-center gap-2 mb-4">
        <input id="user-weight" type="number" min="30" max="180" class="flex-1 rounded-lg border-gray-300 px-3 py-2 focus:outline-pink-500" placeholder="ex: 65">
        <button onclick="saveWeight()" class="bg-pink-500 text-white rounded-lg px-3 py-2 font-bold">OK</button>
        <button onclick="resetWeight()" class="text-gray-500 text-xs">R√©initialiser</button>
      </div>
      <button id="generate-btn" onclick="generateSalad()" class="w-full px-4 py-3 rounded-2xl bg-pink-500 text-white font-bold text-lg shadow-md transition hover:bg-pink-600">Nouvelle Salade</button>
      <div id="generator-result" class="mt-6"></div>
    </div>
  </div>

  <!-- Compositeur de Salade -->
  <div id="composer-view" class="hidden w-full max-w-md mx-auto flex flex-col items-center min-h-screen pt-6">
    <button onclick="showView('menu-view')" class="mb-2 text-pink-500 font-semibold flex items-center gap-1">‚¨ÖÔ∏è Menu</button>
    <div class="card w-full">
      <h2 class="font-display text-2xl mb-3">Composer ta salade üç¥</h2>
      <form id="composer-form" onsubmit="event.preventDefault(); composeSalad();">
        <div id="composer-ingredients"></div>
        <button type="submit" class="w-full mt-4 px-4 py-3 rounded-2xl bg-pink-500 text-white font-bold text-lg shadow-md transition hover:bg-pink-600">Composer ma Salade</button>
      </form>
      <div id="composer-result" class="mt-6"></div>
    </div>
  </div>

  <script>
    // Palette & Constantes
    const MAIN_COLOR = '#ec4899';
    document.documentElement.style.setProperty('--main', MAIN_COLOR);

    // ---- Gestion des vues SPA ----
    function showView(id) {
      document.querySelectorAll('body > div').forEach(div => div.classList.add('hidden'));
      document.getElementById(id).classList.remove('hidden');
      // Reset r√©sultat compositeur si retour
      if (id === 'composer-view') document.getElementById('composer-result').innerHTML = '';
      if (id === 'generator-view') document.getElementById('generator-result').innerHTML = '';
    }
    // ---- Donn√©es Ingr√©dients ----
    const ingredientsDB = {
      "bases": [
        { name: "jeunes pousses d'√©pinards", calories: 20, weight: "80g", emoji: "ü•¨" },
        { name: "laitue", calories: 15, weight: "80g", emoji: "ü•ó" },
        { name: "roquette", calories: 20, weight: "60g", emoji: "üå±" },
        { name: "vermicelles de riz", calories: 110, weight: "40g", emoji: "üçú", preparation: "Cuire les vermicelles, √©goutter, rincer." },
        { name: "tortilla bl√© complet", calories: 120, weight: "1 pi√®ce", emoji: "üåØ" }
      ],
      "proteines": [
        { name: "blanc de poulet", calories: 90, weight: "80g", emoji: "üçó", preparation: "Faire revenir le blanc de volaille √©minc√© et assaisonn√©." },
        { name: "crevettes", calories: 60, weight: "70g", emoji: "ü¶ê" },
        { name: "steak de b≈ìuf", calories: 180, weight: "100g", emoji: "ü•©" },
        { name: "thon en bo√Æte", calories: 85, weight: "60g", emoji: "üêü" },
        { name: "≈ìuf mollet", calories: 65, weight: "1 pi√®ce", emoji: "ü•ö", preparation: "Cuire l'≈ìuf mollet : 6 minutes √† l'eau fr√©missante." },
        { name: "dinde", calories: 80, weight: "70g", emoji: "üçñ" }
      ],
      "legumes": [
        { name: "carottes r√¢p√©es", calories: 25, weight: "60g", emoji: "ü•ï" },
        { name: "concombre", calories: 15, weight: "50g", emoji: "ü•í" },
        { name: "poivron rouge", calories: 18, weight: "40g", emoji: "ü´ë" },
        { name: "chou-fleur", calories: 20, weight: "60g", emoji: "ü•¶" },
        { name: "germes de soja", calories: 10, weight: "20g", emoji: "üå±" }
      ],
      "fromages": [
        { name: "feta", calories: 60, weight: "30g", emoji: "üßÄ" },
        { name: "burrata", calories: 85, weight: "50g", emoji: "ü•õ" }
      ],
      "graines_oleagineux": [
        { name: "pignons de pin", calories: 50, weight: "10g", emoji: "üå∞" },
        { name: "noix de p√©can", calories: 45, weight: "8g", emoji: "ü•ú" },
        { name: "cacahu√®tes", calories: 60, weight: "12g", emoji: "ü•ú" },
        { name: "graines de s√©same", calories: 30, weight: "8g", emoji: "üåæ" }
      ],
      "fruits": [
        { name: "melon", calories: 30, weight: "80g", emoji: "üçà" },
        { name: "past√®que", calories: 20, weight: "80g", emoji: "üçâ" },
        { name: "nectarine", calories: 40, weight: "1/2", emoji: "üçë" },
        { name: "myrtilles", calories: 25, weight: "30g", emoji: "ü´ê" }
      ],
      "herbes": [
        { name: "menthe", calories: 0, weight: "qq feuilles", emoji: "üåø" },
        { name: "basilic", calories: 0, weight: "qq feuilles", emoji: "üåø" },
        { name: "coriandre", calories: 0, weight: "qq feuilles", emoji: "üåø" }
      ],
      "extras": [
        { name: "yaourt maigre", calories: 20, weight: "40g", emoji: "ü•£" },
        { name: "huile d'olive", calories: 40, weight: "1 c.√†.s", emoji: "ü´í" },
        { name: "vinaigre balsamique", calories: 5, weight: "1 c.√†.c", emoji: "ü•Ñ" },
        { name: "sauce soja", calories: 5, weight: "1 c.√†.c", emoji: "ü•Ñ" },
        { name: "jus de citron", calories: 2, weight: "1 c.√†.c", emoji: "üçã" }
      ]
    };

    // ---- Utils ----
    function getRandomElement(arr) {
      return arr[Math.floor(Math.random() * arr.length)];
    }

    function calculateTDEE(weight) {
      // Mifflin-St Jeor : 10*poids + 6.25*taille - 5*√¢ge + 5
      // x1.55 activit√© mod√©r√©e
      const taille = 175, age = 30, genre = 1; // 1 = homme, -161 = femme (option √† ouvrir)
      return Math.round(((10 * weight) + (6.25 * taille) - (5 * age) + 5) * 1.55);
    }

    function saveWeight() {
      const w = document.getElementById('user-weight').value;
      if (w > 30 && w < 200) {
        localStorage.setItem('coachSaladeWeight', w);
        alert('Poids sauvegard√© !');
      }
    }
    function resetWeight() {
      localStorage.removeItem('coachSaladeWeight');
      document.getElementById('user-weight').value = '';
    }
    // Au chargement, pr√©remplir le champ poids
    window.onload = () => {
      const w = localStorage.getItem('coachSaladeWeight');
      if (w) document.getElementById('user-weight').value = w;
      renderComposerIngredients();
    };

    // ---- G√©n√©rateur de salade ----
    function generateSalad() {
      // V√©rifier poids
      const weight = parseInt(document.getElementById('user-weight').value || '0', 10);
      if (!weight || weight < 30) {
        alert('Renseigne ton poids (en kg) pour g√©n√©rer une salade adapt√©e !');
        return;
      }
      // Choix d'un ingr√©dient dans chaque cat√©gorie principale
      const base = getRandomElement(ingredientsDB.bases);
      const proteine = getRandomElement(ingredientsDB.proteines);
      const legumes = getRandomElement(ingredientsDB.legumes);
      const fromages = getRandomElement(ingredientsDB.fromages);
      const graines = getRandomElement(ingredientsDB.graines_oleagineux);
      const fruit = getRandomElement(ingredientsDB.fruits);
      // Herbes
      const herbes = getRandomElement(ingredientsDB.herbes);
      // Extras (1 ou 2)
      const extras = [getRandomElement(ingredientsDB.extras)];
      if (Math.random() > 0.6) extras.push(getRandomElement(ingredientsDB.extras));

      const ingredients = [base, proteine, legumes, fromages, graines, fruit, herbes, ...extras];
      // Total calories
      const totalKcal = ingredients.reduce((sum, ing) => sum + (ing.calories||0), 0);
      // TDEE
      const tdee = calculateTDEE(weight);
      const pct = Math.round((totalKcal / tdee) * 100);
      // Nom de recette
      const name = randomSaladName(base, proteine, fruit);
      // Pr√©paration
      const steps = [
        `D√©poser la base (${base.emoji} ${base.name}) dans une grande assiette ou un bol profond.`,
        proteine.preparation ? `Cuire/Pr√©parer la prot√©ine : ${proteine.preparation}` : `Ajouter la prot√©ine (${proteine.emoji} ${proteine.name}).`,
        legumes.preparation ? `Pr√©parer les l√©gumes : ${legumes.preparation}` : `Ajouter les l√©gumes (${legumes.emoji} ${legumes.name}).`,
        fromages ? `√âmietter le fromage (${fromages.emoji} ${fromages.name}) par-dessus.` : '',
        graines ? `Ajouter les graines ou ol√©agineux (${graines.emoji} ${graines.name}).` : '',
        fruit ? `D√©poser quelques morceaux de fruit (${fruit.emoji} ${fruit.name}) pour la fra√Æcheur.` : '',
        herbes ? `Parsemer d'herbes fra√Æches (${herbes.emoji} ${herbes.name}).` : '',
        extras.map(e => e.name.includes('huile') || e.name.includes('vinaigre') || e.name.includes('sauce') || e.name.includes('citron') ? `Assaisonner avec ${e.emoji} ${e.name}.` : `Ajouter ${e.emoji} ${e.name}.`).join(' '),
        `M√©langer d√©licatement et servir bien frais. Bon app√©tit¬†!`
      ].filter(Boolean);
      // Affichage
      document.getElementById('generator-result').innerHTML = saladCard(name, ingredients, totalKcal, pct, tdee, steps, 'generator');
    }
    // ---- G√©n√©rateur de nom de salade ----
    function randomSaladName(base, proteine, fruit) {
      const adj = ["Fra√Æcheur", "Gourmande", "Exotique", "Vitalit√©", "√âclatante", "Croquante", "Color√©e", "Tonique", "Zen"];
      const c1 = adj[Math.floor(Math.random()*adj.length)];
      const c2 = base.name.split(' ')[0];
      const c3 = proteine.name.split(' ')[0];
      const c4 = fruit ? fruit.name.split(' ')[0] : '';
      return `La ${c1} ${c2} ${c3}${c4 ? ' & ' + c4 : ''}`;
    }

    // ---- Affichage carte recette ----
    function saladCard(name, ingredients, totalKcal, pct, tdee, steps, mode) {
      return `
      <div class="card">
        <h3 class="font-display text-xl mb-2">${name}</h3>
        <ul class="mb-3">
          ${ingredients.map(ing => `<li>${ing.emoji} <b>${ing.name}</b> <span class="text-xs text-gray-500">(${ing.weight}, ${ing.calories} kcal)</span></li>`).join('')}
        </ul>
        <div class="flex items-center gap-4 mb-3">
          <div class="pie" style="--pct:${Math.min(pct,100)}">
            <span class="pie-text">${pct}%</span>
          </div>
          <div>
            <div class="font-bold text-lg">${totalKcal} kcal</div>
            <div class="text-xs text-gray-600">${pct < 70 ? 'Parfait pour un repas l√©ger.' : (pct < 100 ? 'Repas complet.' : 'Tr√®s copieux !')}</div>
            <div class="text-xs text-gray-400">Besoins quotidiens¬†: ${tdee} kcal</div>
          </div>
        </div>
        <div class="mb-2">
          <ol class="list-decimal list-inside text-sm text-gray-700">
            ${steps.map(s => `<li>${s}</li>`).join('')}
          </ol>
        </div>
        <button onclick="copyRecipe(this)" class="mt-2 px-4 py-2 rounded-xl bg-pink-500 text-white font-bold text-base hover:bg-pink-600">Copier la recette</button>
      </div>
      `;
    }

    // ---- Copie recette ----
    function copyRecipe(btn) {
      const card = btn.closest('.card');
      let text = '';
      card.querySelectorAll('h3, ul, ol').forEach(el => text += el.innerText + '\\n');
      navigator.clipboard.writeText(text);
      btn.innerText = "Copi√© !";
      setTimeout(() => btn.innerText = "Copier la recette", 2000);
    }

    // ---- Compositeur : afficher ingr√©dients ----
    function renderComposerIngredients() {
      const catNames = {
        bases: 'Bases',
        proteines: 'Prot√©ines',
        legumes: 'L√©gumes',
        fromages: 'Fromages',
        graines_oleagineux: 'Graines/Ol√©agineux',
        fruits: 'Fruits',
        herbes: 'Herbes',
        extras: 'Extras'
      };
      let html = '';
      for (const [cat, list] of Object.entries(ingredientsDB)) {
        html += `<div class="mb-2"><div class="font-bold text-pink-500 mb-1">${catNames[cat]}</div>`;
        html += '<div class="flex flex-wrap gap-2 mb-2">';
        list.forEach((ing, idx) => {
          html += `<label class="inline-flex items-center gap-1 bg-white/70 rounded-lg px-2 py-1 shadow border">
              <input type="checkbox" name="${cat}" value="${idx}" class="accent-pink-500">
              <span>${ing.emoji} ${ing.name}</span>
            </label>`;
        });
        html += '</div></div>';
      }
      document.getElementById('composer-ingredients').innerHTML = html;
    }

    // ---- Compositeur : calcul et affichage ----
    function composeSalad() {
      const form = document.getElementById('composer-form');
      const selected = Array.from(form.querySelectorAll('input[type=checkbox]:checked'));
      if (!selected.length) {
        alert('S√©lectionne au moins un ingr√©dient !');
        return;
      }
      let ings = [];
      for (const el of selected) {
        ings.push(ingredientsDB[el.name][parseInt(el.value)]);
      }
      const totalKcal = ings.reduce((sum, ing) => sum + (ing.calories||0), 0);
      const weight = parseInt(localStorage.getItem('coachSaladeWeight') || '70', 10);
      const tdee = calculateTDEE(weight);
      const pct = Math.round((totalKcal / tdee) * 100);
      const name = randomSaladName(
        ings.find(i => i.emoji === 'ü•¨' || i.emoji === 'ü•ó' || i.emoji === 'üå±') || ings[0],
        ings.find(i => i.emoji === 'üçó' || i.emoji === 'ü•©' || i.emoji === 'üêü' || i.emoji === 'ü¶ê' || i.emoji === 'üçñ' || i.emoji === 'ü•ö') || ings[0],
        ings.find(i => i.emoji === 'üçà' || i.emoji === 'üçâ' || i.emoji === 'üçë' || i.emoji === 'ü´ê')
      );
      // Pr√©paration custom basique
      const steps = ings.map(i => i.preparation ? i.preparation : `Ajouter ${i.emoji} ${i.name}.`);
      steps.push('M√©langer d√©licatement, servir bien frais. Bon app√©tit¬†!');
      document.getElementById('composer-result').innerHTML = saladCard(name, ings, totalKcal, pct, tdee, steps, 'composer');
    }
  </script>
</body>
</html>
